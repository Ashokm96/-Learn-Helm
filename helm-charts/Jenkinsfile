pipeline {
    agent { label "chart-testing-agent" }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Lint") {
            steps {
                container("chart-testing") {
                    sh "ct lint"
                }
            }
        }
        stage("Install") {
            steps {
                container("chart-testing") {
                    sh "ct install --upgrade"
                }
            }
        }
        stage("Package Charts") {
            steps {
                script {
                    container("chart-testing") {
                        sh "mkdir packaged-charts"
                        charts = sh(script: "find helm-charts/charts ! -path helm-charts/charts -type d -maxdepth 1 -print", returnStdout: true)
                        chartList = charts.split("\n")
                        chartList.each { chart ->
                            sh "helm package ${chart} --dependency-update --destination packaged-charts"
                        }
                    }
                }
            }
        }
        stage("Push Charts to Chart Repo") {
            steps {
                script {
                    container("chart-testing") {
                        sh "git clone ${env.GITHUB_PAGES_REPO_URI} chart-repo"
                        def repoType
                        if (env.BRANCH_NAME == "master") {
                            repoType = "stable"
                        } else {
                            repoType = "staging"
                        }
                        def files = sh(script: "ls chart-repo", returnStdout: true)
                        if (!files.contains(repoType)) {
                            sh "mkdir chart-repo/${repoType}"
                        }
                        sh "mv packaged-charts/*.tgz chart-repo/${repoType}"
                        sh "helm repo index chart-repo/${repoType} --merge packaged-charts/index.yaml"
                        sh "git config --global user.email 'chartrepo-robot@example.com'"
                        sh "git config --global user.name 'chartrepo-robot'"
                        dir("chart-repo") {
                            def status = sh(script: "git status -s", returnStdout: true)
                            if (status.contains("tgz") || status.contains("staging/\n") || status.contains("stable/\n")) {
                                sh "git add --all"
                                sh "git commit -m 'pushing charts from branch ${env.BRANCH_NAME}'"
                                withCredentials([usernameColonPassword(credentialsId: 'github-auth', variable: 'USERPASS')]) {
                                    script {
                                        def authRepo = env.GITHUB_PAGES_REPO_URI.replace("://", "://${USERPASS}@")
                                        sh "git push ${authRepo} master"
                                    }
                                }
                            } else {
                                echo "No charts changed! Skipping push..."
                            }
                        }
                    }
                }
            }
        }
    }
}