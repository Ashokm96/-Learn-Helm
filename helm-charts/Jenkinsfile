def changedCharts
def packagedChartsCount = 0

pipeline {
    agent { label "chart-testing-agent" }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage("Lint") {
            steps {
                container("chart-testing") {
                    sh "ct lint"
                }
            }
        }
        stage("Install") {
            steps {
                container("chart-testing") {
                    sh "ct install --upgrade"
                }
            }
        }
        stage("Package Charts") {
            steps {
                script {
                    container("chart-testing") {
                        changedCharts = sh(script: "ct list-changed", returnStdout: true)
                        def changedChartsList = changedCharts.split("\n")
                        sh "mkdir packaged-charts"
                        changedChartsList.each { chart ->
                            if (chart != "") {
                                echo chart
                                sh "helm package ${chart} --destination packaged-charts"
                                packagedChartsCount++
                            }
                        }
                        echo "Packaged ${packagedChartsCount} charts."
                    }
                }
            }
        }
        stage("Push Charts to Chart Repo") {
            when {
                expression {
                    return (packagedChartsCount > 0) && (env.BRANCH_NAME == 'master')
                }
            }
            steps {
                container("chart-testing") {
                    sh "git clone ${env.GITHUB_PAGES_REPO_URI} chart-repo"
                    sh "mv packaged-charts/*.tgz chart-repo"
                    sh "helm repo index chart-repo --merge packaged-charts/index.yaml"
                    sh "git config --global user.email 'chartrepo-robot@example.com'"
                    sh "git config --global user.name 'chartrepo-robot'"
                    dir("chart-repo") {
                        sh "git add --all"
                        sh "git commit -m 'updated charts:\n${changedCharts}'"
                        withCredentials([usernameColonPassword(credentialsId: 'github-auth', variable: 'USERPASS')]) {
                            script {
                                def authRepo = env.GITHUB_PAGES_REPO_URI.replace("://", "://${USERPASS}@")
                                sh "git push ${authRepo} master"
                            }
                        }
                    }
                }
            }
        }
    }
}